// Code generated by "grumbs/event -type=OrderPlaced,OrderShipped"; DO NOT EDIT

package main

type EventType int

const (
	EventOrderPlaced EventType = iota
	EventOrderShipped
)

type Event interface {
	Type() EventType
	Trigger()
}

func (e OrderPlaced) Type() EventType {
	return EventOrderPlaced
}

func (e OrderPlaced) Trigger() {
	EmitterOrderPlaced.Trigger(e)
}

type OrderPlacedHandler interface {
	Handle(OrderPlaced)
}

type OrderPlacedHandlerFunc func(OrderPlaced)

func (f OrderPlacedHandlerFunc) Handle(e OrderPlaced) {
	f(e)
}

type OrderPlacedEmitter struct {
	handlers []OrderPlacedHandler
}

func (m *OrderPlacedEmitter) Trigger(e OrderPlaced) {
	for _, h := range m.handlers {
		h.Handle(e)
	}
}

func (m *OrderPlacedEmitter) Handle(h OrderPlacedHandler) {
	m.handlers = append(m.handlers, h)
}

func (m *OrderPlacedEmitter) HandleFunc(f func(OrderPlaced)) {
	m.Handle(OrderPlacedHandlerFunc(f))
}

func OnOrderPlaced(f func(OrderPlaced)) {
	EmitterOrderPlaced.Handle(OrderPlacedHandlerFunc(f))
}

func (e OrderShipped) Type() EventType {
	return EventOrderShipped
}

func (e OrderShipped) Trigger() {
	EmitterOrderShipped.Trigger(e)
}

type OrderShippedHandler interface {
	Handle(OrderShipped)
}

type OrderShippedHandlerFunc func(OrderShipped)

func (f OrderShippedHandlerFunc) Handle(e OrderShipped) {
	f(e)
}

type OrderShippedEmitter struct {
	handlers []OrderShippedHandler
}

func (m *OrderShippedEmitter) Trigger(e OrderShipped) {
	for _, h := range m.handlers {
		h.Handle(e)
	}
}

func (m *OrderShippedEmitter) Handle(h OrderShippedHandler) {
	m.handlers = append(m.handlers, h)
}

func (m *OrderShippedEmitter) HandleFunc(f func(OrderShipped)) {
	m.Handle(OrderShippedHandlerFunc(f))
}

func OnOrderShipped(f func(OrderShipped)) {
	EmitterOrderShipped.Handle(OrderShippedHandlerFunc(f))
}

var (
	EmitterOrderPlaced  = OrderPlacedEmitter{}
	EmitterOrderShipped = OrderShippedEmitter{}
)

func Trigger(e Event) {
	e.Trigger()
}
